<?php
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Render\Markup;
use Drupal\views\Views;

use Drupal\Core\Entity\EntityInterface;
use Drupal\comment\CommentInterface;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\user\Entity\User;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache\Cache;


function comment_alert_preprocess_page(&$variables) {
    //initialize variables to false
    $variables['sub_button']= false;
    $variables['message']= false;
    $send_alert=false;

    if(isset($_COOKIE['Drupal_visitor_notify_node'])){
        //count how many nodes are being tracked
        //each separate tracking is delimited by ';'
        $all_alerts=preg_split('{;}',$_COOKIE['Drupal_visitor_notify_node']);
        $num_alerts=sizeof($all_alerts);
        $alert_nids=array();
        $alert_ccs=array();

        //get cookie and node data on store as array
        for($i=0;$i<$num_alerts;$i++){
            if(empty($all_alerts[$i])){
                continue;
            }

            $alert_data = preg_split('{:}',$all_alerts[$i]);
            $alert_nid=$alert_data[0];
            $alert_cc=$alert_data[1];

            $alert_node = \Drupal::entityTypeManager()->getStorage('node')->load($alert_nid);
            $current_cc=$alert_node->get('comment')->comment_count;
            $alert_alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$alert_nid);

            $alert_nids[]=$alert_nid;
            $alert_ccs[$alert_nid]['alert_cc']=$alert_cc;
            $alert_ccs[$alert_nid]['current_cc']=$current_cc;
            $alert_ccs[$alert_nid]['alias']=$alert_alias;
            $alert_ccs[$alert_nid]['title']=$alert_node->getTitle();
        }

        //current page
        $node = \Drupal::routeMatch()->getParameter('node');
        //if user is viewing a node
        if ($node instanceof \Drupal\node\NodeInterface) {
            $current_page=$node->id();
            //and node is in the alert array
            if((in_array($current_page,$alert_nids))){
                //dont cache and display unfollow button with var 'sub_button'
                Drupal::service('page_cache_kill_switch')->trigger();
                $variables['sub_button']= true;

                //update_cookie to not notify of current node while viewing it
                $cookie=$_COOKIE['Drupal_visitor_notify_node'];
                $cookie=str_replace($current_page.':'.$alert_ccs[$current_page]['alert_cc'],$current_page.':'.$alert_ccs[$current_page]['current_cc'],$cookie);
                user_cookie_save(['notify_node' => $cookie]);
                $alert_ccs[$current_page]['alert_cc']=$alert_ccs[$current_page]['current_cc'];

                $variables['nid']= $current_page;
                $variables['comment_count']= $alert_ccs[$current_page]['alert_cc'];

            }

        }
        //displaying alerts for each node with new comments
        $total_alerts=0; //total alerts counter
        foreach ($alert_nids as $nid){
            if($alert_ccs[$nid]['alert_cc']!=$alert_ccs[$nid]['current_cc']){
                $diff=$alert_ccs[$nid]['current_cc']-$alert_ccs[$nid]['alert_cc'];

                $variables['alerts'][$nid]['nid']=$nid;
                $variables['alerts'][$nid]['diff']=$diff;
                $variables['alerts'][$nid]['alert_cc']=$alert_ccs[$nid]['alert_cc'];
                $variables['alerts'][$nid]['current_cc']=$alert_ccs[$nid]['current_cc'];
                $variables['alerts'][$nid]['alias']=$alert_ccs[$nid]['alias'];
                $variables['alerts'][$nid]['title']=$alert_ccs[$nid]['title'];

                $send_alert=true;
                $total_alerts+=$diff;
            }
        }
        //only kill cache if there are alerts to be made
        if($send_alert==true){
            $variables['total_alerts']=$total_alerts;
            Drupal::service('page_cache_kill_switch')->trigger();
        }
    }
}

function comment_alert_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
        //add alert checkbox to comment form
        $form['comment_notify_settings']['notify'] = [
            '#type' => 'checkbox',
            '#title' => t('Notify me when new comments are posted'),
            '#default_value' => false,
        ];


    $form['actions']['submit']['#submit'][] = '_comment_alert_submit_comment_form';
}
function _comment_alert_submit_comment_form(array &$form, FormStateInterface $form_state) {
    //if user wants to be notified
    if($form_state->getValue('notify')==true){
        //get nid of node comment was posted on
        $entity = $form_state->getFormObject()->getEntity();
        $nid = $entity->get('entity_id')->target_id;
        $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

        //get the current number of comments on page
        $comment_count=$node->get('comment')->comment_count;

        //if they are following another page
        //append this page to cookie
        if(isset($_COOKIE['Drupal_visitor_notify_node'])){
            $current_cookie=$_COOKIE['Drupal_visitor_notify_node'];
            $updated_cookie=$current_cookie.';'.$nid.':'.$comment_count;
            user_cookie_save(['notify_node' => $updated_cookie]);

        }
        //if first page to follow
        else{
            //create cookie
            user_cookie_save(['notify_node' => $nid.':'.$comment_count]);
        }
    }
}
